#include "../pch.h"
#include "ChaoGardenManager.h"
#include "LocationManager.h"
#include "../Utilities/MessageQueue.h"


DataPointer(char, ChaoEggsRandomized, 0x19F6460);
DataPointer(char, ChaoNamesUsed, 0x19F6461);
DataPointer(char, ChaoGardenTimescale, 0x01312DE4);


struct BlackMarketStockItem
{
	int Cost;
	int gap_4;
	int16_t unknown_8;
	int16_t NameTextIndex;
	int16_t DescTextIndex;
	int16_t gap_E;
};

DataArray(BlackMarketStockItem, BlackMarketEggStock,   0x8A7B68, 0x45);
DataArray(BlackMarketStockItem, BlackMarketSeedStock,  0x8A7FB8, 0x7);
DataArray(BlackMarketStockItem, BlackMarketFruitStock, 0x8A8028, 0x18);
DataArray(BlackMarketStockItem, BlackMarketHatStock,   0x8A81A8, 0x55);
DataArray(BlackMarketStockItem, BlackMarketMenuStock,  0x8A86F8, 0x3);

ObjectMaster* BlackMarketObject = nullptr;
void __cdecl alg_blackmarket_prolog_r(ObjectMaster* obj);
Trampoline alg_blackmarket_prolog_t(0x58BFC0, 0x58BFC5, alg_blackmarket_prolog_r);
void __cdecl alg_blackmarket_prolog_r(ObjectMaster* obj)
{
	((void(*)(ObjectMaster*))alg_blackmarket_prolog_t.Target())(obj);
	BlackMarketObject = obj;
}

// Black Market Purchase "Trampoline"
static void __cdecl BlackMarketPurchase()
{
	if (BlackMarketObject && BlackMarketObject->Data2.BlackMarket)
	{
		LocationManager::getInstance().SendBlackMarketLocationCheck(BlackMarketObject->Data2.BlackMarket->MenuSelection);
		BlackMarketObject->Data2.BlackMarket->MenuSelection = 0;
		BlackMarketObject->Data2.BlackMarket->MenuOffset = 0;
	}
}
// End Black Market Purchase "Trampoline"

// Black Market Assets
static NJS_TEXANIM OrbsAnim[] = {
	//Padding
	{128, 128, 64, 64, 0x00, 0x00, 0x100, 0x100, 0, 0},
	// Not Padding
	{128, 128, 64, 64, 0x00, 0x00, 0x100, 0x100, 0, 0},
	//Padding
	{128, 128, 64, 64, 0x00, 0x00, 0x100, 0x100, 0, 0},
};

FunctionPointer(void, ReleaseTextureList, (NJS_TEXLIST* a1), 0x77F9F0);

static const int OrbsTexCount = 1;

static NJS_TEXNAME OrbsTexName[OrbsTexCount];
static NJS_TEXLIST OrbsTexList = { OrbsTexName, OrbsTexCount };

static TexPackInfo OrbsTexPacks[] = {
	{ "AP_ORBS", &OrbsTexList },
	{ nullptr, nullptr }, //Needs to end in a null entry to prevent the LoadTextures call from iterating past the packs
};

#pragma region ModelData
Sint32 cnk_Sphere_002_vtx[] = { 0x6970029, 0x1190000, 0xBD5E5120u, 0x3DE2F164, 0x3D53FC18, 0xBE4E8B10u, 0xBE5F8846u, 0xBF746E80u, 0x3C64D500, 0xBC7D1DD0u, 0x3DFE2330, 0x3DA628E8, 0xBF393C4Bu, 0xBF2F7A47u, 0x3D3162C4, 0x3E9C6B44, 0x3DB769A4, 0x3E52243C, 0x3EFEF981, 0xBF57B125u, 0x3B06A110, 0xBDA050A2u, 0x3E68DC60, 0x3CE37ADB, 0xBF74EEAAu, 0xBE943CFFu, 0x3D978DA0, 0x3E5537A9, 0x3D74CFB0, 0x3E9B21FD, 0x3E1E17C1, 0xBF70BE4Eu, 0x3DD15994, 0x3DAEDCA4, 0x3DADF5BC, 0x3EE3925B, 0xBEA8ECA2u, 0xBF55339Du, 0x3E2E8AD4, 0x3CA48898, 0x3E414600, 0x3F2B4DEF, 0xBF1A1BC9u, 0xBEDF14EBu, 0x3E34C33C, 0x3E5C6711, 0x3E06CB08, 0x3F3897E8, 0x3E2FA0D6, 0xBF2BDA5Du, 0x3E6C7CB4, 0x3E086C82, 0x3E5C69C0, 0x3F6C5D64, 0xBDF8D125u, 0xBEBA8D19u, 0x3DEB62B0, 0xBD5CF933u, 0x3EA7B8D8, 0x3EF8D99C, 0xBF5EB2F9u, 0x3DAB7DFF, 0x3E69D328, 0x3E822FB8, 0x3E80F032, 0x3F6E695C, 0x3EA3974A, 0xBE3320E4u, 0x3E71ED90, 0x3DA430A4, 0x3E9EE7B8, 0x3F704CBF, 0xBEABDEC2u, 0x3DA16D81, 0x3E0CB3A2, 0x3EAF7DD8, 0x3E35D148, 0x3F121923, 0x3F2DFC40, 0xBEEBF835u, 0x3E5C5BDC, 0x3E6B7511, 0x3ED221CC, 0x3F604AF8, 0x3E695EE0, 0x3ED97BF8, 0x3E2ADD84, 0x3D05538C, 0x3ED9B190, 0x3F34488D, 0xBF075B56u, 0x3EF296F5, 0xB9B2DEC0u, 0x3EBBADCC, 0x3E0AF794, 0x3C7ABD0F, 0x3F468351, 0xBF219892u, 0x3E3B97AC, 0x3EAE0278, 0x3EAF5BB8, 0x3F380560, 0x3F2CECD1, 0x3E283F4C, 0x3E302188, 0x3E22B031, 0x3EF7996C, 0x3F35D19A, 0xBCA6ECD3u, 0x3F34240F, 0x3CCC71E0, 0x3ED7B8DA, 0x3E861A44, 0x3E343582, 0x3F7873FF, 0xBE28A258u, 0x3D80869E, 0x3E630AC1, 0x3F09579A, 0x3E8BE785, 0x3E5770F4, 0x3F704B8F, 0x3DC5D378, 0x3DAAD784, 0x3F04433A, 0x3EC6B9E5, 0xBEB1FAB1u, 0x3F5A80EB, 0x3D86F24C, 0xBCB80968u, 0x3EE56C58, 0x3E862CAE, 0xBF431828u, 0x3F1791F0, 0x3DA85168, 0x3EA66F04, 0x3EF6BB44, 0x3EB9D0BE, 0x3F1AB227, 0x3F3595E9, 0x3D67A94C, 0x3ECEC7EC, 0x3EBFAF80, 0x3E8E5F32, 0x3F68EB2B, 0x3E9DB3B2, 0xBBC4F1C6u, 0x3DC34CC4, 0x3F0B759C, 0x3A518361, 0xBE957008u, 0x3F74DA67, 0xBD48937Eu, 0x3ED60742, 0x3EAACFFC, 0xBE47C9A4u, 0x3F786FBE, 0x3E115C7F, 0xBD915576u, 0x3EC36BC8, 0x3EDB45EC, 0xBE84E24Cu, 0x3F532408, 0x3F009CAD, 0xBDA222D6u, 0x3E98BF90, 0x3F035476, 0xBE87BBB2u, 0x3EFFC4B5, 0x3F532136, 0xBDBB3080u, 0x3E4231D1, 0x3F0A9114, 0xBEAC9088u, 0x3D815CAF, 0x3F707A7C, 0xBE52451Cu, 0x3E8BB6E8, 0x3EDB35A8, 0xBF40B1B7u, 0x3ED4A399, 0x3F02C56E, 0xBD7B1C20u, 0x3C2DB430, 0x3EFBA578, 0xBE360176u, 0xBF1FE4F6u, 0x3F42AD7F, 0xBDC521B0u, 0x3ECB6C30, 0x3E67D0A0, 0xBEB80C6Eu, 0x3F639D46, 0xBE910A92u, 0xBE37C888u, 0x3EB74E34, 0x3E9AB258, 0xBF2BFC58u, 0x3F3D6E89, 0x3D083D99, 0xBE8262E8u, 0x3E6F0DB9, 0x3EA419C4, 0xBF792872u, 0x3E60F2FA, 0x3D891750, 0xBE5F6920u, 0x3E09E182, 0x3EE2F7F4, 0xBF539D7Bu, 0xBDD8E060u, 0x3F0D7E0C, 0xBE23F68Au, 0x3D9073A4, 0x3EF53500, 0xBF152884u, 0xBECBA531u, 0x3F357047, 0xBE5C3C28u, 0x3E910738, 0x3E519C48, 0xBF50B2AFu, 0x3EE2E3B0, 0xBEBEE869u, 0xBE40973Cu, 0x3E4F5C41, 0x3DF9F750, 0xBF33436Fu, 0x3D9D3BE6, 0xBF35B2D0u, 0xBE6FB6A4u, 0x3D67244C, 0x3EAF0BF0, 0xBF63A184u, 0xBEDC13BBu, 0x3E209542, 0xBDDFA500u, 0xBD041833u, 0x3ED4F218, 0xBEDD1325u, 0xBF490C0Cu, 0x3EE32289, 0xBDFBAB78u, 0x3EAFA2B4, 0x3E207890, 0xBEF220D0u, 0x3F2AF47B, 0xBF13270Eu, 0xBE75740Cu, 0x3DF22A04, 0x3E4C2C6C, 0xBF64D765u, 0xBE59899Bu, 0xBECA16B1u, 0xBE2B740Au, 0xBD00CA33u, 0x3E910A44, 0xBF1B4086u, 0xBF4A13EDu, 0xBDC386ADu, 0xBE0F090Eu, 0x3CC75F98, 0x3E0B9670, 0xBF070338u, 0xBF0EC0E8u, 0xBF2419C6u, 0xBD166CD8u, 0xBD9DEB62u, 0x3EB9CF90, 0xBDCD05AAu, 0xBF774B6Bu, 0x3E741E1F, 0xBDDBB8C4u, 0x3E82D000, 0x3DA58414, 0xBEB785BDu, 0x3EAB0ED0, 0xBF5F2922u, 0xBD0192A6u, 0x3F71CB4D, 0x3EEE7CB0, 0xBE030144u, 0x3F2968D8, 0xBF3D1CF3u, 0xBDB2C816u, 0x3F0DA053, 0x3F092866, 0xBE9A4B51u, 0xBF570403u, 0xBEE71B51u, 0xBD8C6C92u, 0x3F05A4EC, 0x3F23517C, 0xBE737E59u, 0xBF7883FCu, 0xBD064937u, 0xBC7CFA50u, 0x3F531543, 0x3ECA6B00, 0xBD4BDA92u, 0x3E53B418, 0xBF7A251Fu, 0x3D842A4C, 0x3F1BF685, 0x3EEE7F70, 0x3E834E8F, 0xBF1FCE50u, 0xBF3CE972u, 0x3DBF3258, 0x3F460825, 0x3ED0E000, 0x3EC52D01, 0x3B005E67, 0xBF6C4125u, 0x3DAD7704, 0x3F0B65AF, 0x3F135F5E, 0x3EAF1723, 0xBF657AE8u, 0xBE905EE8u, 0x3E2CB3DC, 0x3F3AAAC7, 0x3EEF9E64, 0x3F2FEF24, 0xBE5B4060u, 0xBF31B43Cu, 0x3E272DE8, 0x3F212065, 0x3F053C5C, 0x3F2F5C41, 0xBF088490u, 0xBEFE2587u, 0x3E4D9988, 0x3F540F7D, 0x3F03C82A, 0x3F4AC0E2, 0x3E7BF30C, 0xBF0F0983u, 0x3E58521C, 0x3F2462C7, 0x3F2157A0, 0x3F58C0AC, 0xBF0598D1u, 0xBDD496D6u, 0x3E163ACC, 0x3F6CC15B, 0x3F0411EC, 0x3F1B2EFA, 0x3F173A66, 0xBF0852DCu, 0x3E1055FC, 0x3F126D7D, 0x3F336D64, 0x3F1F7DBF, 0xBF404910u, 0x3E5F9A53, 0x3D8A58B8, 0x3F721E6D, 0x3EF43124, 0x3E9ABA5E, 0x3F294334, 0xBF2FC96Fu, 0x3E767410, 0x3F4CD3C9, 0x3F15E616, 0x3F77DDD0, 0x3DB245BD, 0xBE700E0Bu, 0x3E74842C, 0x3F3443B9, 0x3F2EDA30, 0x3F7394D5, 0xBE84C913u, 0x3E2985CA, 0x3E3E8924, 0x3F6DA6F7, 0x3F1B6050, 0x3F43F1F9, 0x3F20CA0B, 0xBE0F925Bu, 0x3D607A58, 0x3F07F1C9, 0x3F3808DC, 0x3E762F12, 0xBF6EBD83u, 0x3E89DB88, 0x3E64F968, 0x3F5C9657, 0x3F345978, 0x3F67F2DA, 0x3EB69717, 0x3E69461D, 0x3E4D3038, 0x3F3D3C7B, 0x3F4A50D8, 0x3F51272B, 0xBE099BDAu, 0x3F0F8D9B, 0x3DF33E40, 0x3F24DF2F, 0x3F5495C0, 0x3F06E1B4, 0xBF006D32u, 0x3F2FA3F3, 0x3E22A97C, 0x3F63CE7F, 0x3F4DE8FC, 0x3F26B2DB, 0x3EED7579, 0x3F19C9D6, 0x3D927864, 0x3F8113B9, 0x3F1B64BE, 0x3EAB6BC4, 0x3F6CD58D, 0xBE374583u, 0x3DEFB658, 0x3F7CCD6B, 0x3F3228F0, 0x3EFA8B72, 0x3F57DE5B, 0x3E63CF72, 0x3D529DD4, 0x3F6F591F, 0x3F5552FC, 0x3E6643DE, 0x3F24BC6F, 0x3F3B4EC2, 0x3DCBCF98, 0x3F49DDD7, 0x3F617380, 0x3EDB8AAB, 0x3DA34CB2, 0x3F665E5D, 0xBCEA848Cu, 0x3F7AB88F, 0x3F4B0E78, 0xBDAD53F8u, 0x3F50290D, 0x3F136E4D, 0xBD110D14u, 0x3F53A8FF, 0x3F65AC40, 0xBDEFCCFAu, 0x3E64B2A8, 0x3F77BA11, 0x3CB9DEA0, 0x3F34786D, 0x3F6448F4, 0x3D90FBCD, 0xBE881707u, 0x3F761FF6, 0x3C7C8630, 0x3F1A8965, 0x3F562D34, 0x3DA6D877, 0xBF26BF28u, 0x3F411F8B, 0xBCA1083Au, 0x3F8356F1, 0x3F28C928, 0xBD2AD9D6u, 0x3F7F4BF2, 0x3D7ABDDF, 0xBE1B74ACu, 0x3F637C4D, 0x3F5383C8, 0xBF08A564u, 0x3EF55913, 0x3F325E13, 0xBDE57514u, 0x3F7FA465, 0x3F329400, 0xBEE05BB4u, 0x3F5FDDE5, 0x3E54FF85, 0xBE6540B0u, 0x3F5D3B03, 0x3F40A3CC, 0xBF5AC5A9u, 0x3EB1886A, 0x3EC5F13B, 0xBE19CB24u, 0x3F40A59B, 0x3F5BC930, 0xBF0DA1E3u, 0xBD81C148u, 0x3F54A24B, 0xBD2A7B98u, 0x3F0DEAC1, 0x3F4756F8, 0xBE17F48Fu, 0xBF58FE96u, 0x3F02686F, 0xBE08F986u, 0x3F287B53, 0x3F57A560, 0xBEF0418Fu, 0xBEDB0758u, 0x3F45C466, 0xBE53C988u, 0x3F6DCD3B, 0x3F23883C, 0xBF4BCA4Eu, 0x3F1AD1ED, 0xBCC0C745u, 0xBE71EA68u, 0x3F33565B, 0x3F3BD840, 0xBF64C3A7u, 0xBE85D7ADu, 0x3EBACF3B, 0xBC955987u, 0x3F805A56, 0x3F0BDDAA, 0xBD457DB9u, 0x3F6AEAEA, 0xBEC9F6BFu, 0xBE872188u, 0x3F416C17, 0x3F21D370, 0xBF7F1E2Eu, 0xBD6D539Bu, 0xBD731A6Du, 0xBE74C970u, 0x3F54CEDF, 0x3F0F4B56, 0xBF66A78Du, 0x3E76D8C4, 0xBEB8ACAEu, 0xBE153D90u, 0x3F15F727, 0x3F419190, 0xBF0DFD22u, 0xBF3B12DBu, 0x3ECBC048, 0xBE0C3AE8u, 0x3F78651B, 0x3F0C836C, 0xBF02440Au, 0x3F443B6C, 0xBEC898D3u, 0xBE50B984u, 0x3F1C126B, 0x3F26C9DC, 0xBF4438A3u, 0xBF246511u, 0xBC30159Fu, 0xBE4C92DCu, 0x3F2A3ED9, 0x3F02E29A, 0xBF3F5D3Cu, 0xBEC8C9A2u, 0xBF093F51u, 0xBE1F33E8u, 0x3F5875A9, 0x3EE5F414, 0xBF13EF54u, 0x3E86DE64, 0xBF45BF3Du, 0xBD915742u, 0x3F2A2DBF, 0x3ED6C474, 0xBE771035u, 0xBECA0697u, 0xBF62F974u, 0xBB6726DCu, 0x3EB83E54, 0xBF10FD54u, 0x3C73B72A, 0x3F3B6671, 0xBF2E5D18u, 0xBD4A0A68u, 0x3DA93924, 0xBF2178B0u, 0xBE4833D8u, 0xBEAE0F73u, 0xBF6B7E0Fu, 0xBD9F231Cu, 0xBD6F1EF3u, 0xBEF92F30u, 0xBE8D7927u, 0xBF641FF2u, 0xBEB84C38u, 0xBD9F08E8u, 0xBD982FE2u, 0xBEBEC3A6u, 0xBE839EAAu, 0xBF76DBCEu, 0x3D82727F, 0xBD0C2990u, 0xBC7145D0u, 0xBF11E6DCu, 0xBDD98458u, 0xBF349AE1u, 0xBF336242u, 0x3D762B50, 0x3DE62BE4, 0xBF228F80u, 0x3E88A225, 0xBE7B7C42u, 0xBF6E9220u, 0x3CF66E78, 0x3E873A94, 0xBF2064D8u, 0x3E1998C9, 0x3EB897FC, 0xBF6BACD8u, 0x3DF63460, 0x3E53C671, 0xBF1C5FC4u, 0x3F013960, 0x3E124A20, 0xBF59F1AAu, 0x3DB9FACC, 0xBD1A7E33u, 0xBF02A194u, 0x3EC5F728, 0xBF497AE1u, 0xBEF61FABu, 0x3DB64124, 0xBD82CA5Au, 0xBEDA1F04u, 0x3EBACD7D, 0xBF6C9A56u, 0xBDE6A703u, 0x3D0159F0, 0xBD911DA2u, 0xBEAA81FCu, 0x3E1A516C, 0xBF763307u, 0x3E6A6293, 0x3E3335BC, 0x3DA51B64, 0xBF0C64C4u, 0x3F32D0F3, 0xBEBAA9AEu, 0xBF1DA38Du, 0x3E4BC878, 0x3E4C0861, 0xBF09EAF6u, 0x3F5369E2, 0x3DD4E703, 0xBF0DE32Fu, 0x3E0993D0, 0x3EA15920, 0xBF0C0172u, 0x3F1057F6, 0x3F115CC0, 0xBF198712u, 0x3E650928, 0x3D7D944C, 0xBEDE5318u, 0x3F63C18B, 0xBEDAA980u, 0xBE2567A4u, 0x3C98CE48, 0xBCB5D768u, 0xBE6C45E8u, 0x3DB62FA0, 0xBF400E03u, 0x3F27BA1D, 0x3E229F78, 0xBC858368u, 0xBEB2E98Cu, 0x3F2C2147, 0xBF387C9Eu, 0x3E2D0FBF, 0x3E6C3960, 0x3E7AB1C1, 0xBEE5421Cu, 0x3F7045D4, 0x3E8EC1F4, 0xBE503B9Cu, 0x3E7842C0, 0x3E05DEEA, 0xBEBA3F3Au, 0x3F7B3CFE, 0xBE12A8DDu, 0x3E02E7F9, 0x3DD72760, 0xBC6E2ED0u, 0xBE860460u, 0x3EEBE1F5, 0xBF3AB2D2u, 0x3F017F47, 0x3D924214, 0x3ECC5AC8, 0xBEF44B9Cu, 0x3EA2D298, 0x3F639F62, 0xBEA87A2Fu, 0x3E598938, 0x3E821DD8, 0xBE936D10u, 0x3F58D9D1, 0x3EA25D02, 0x3EDA5E6C, 0x3DC84424, 0x3D72B90C, 0xBE458D82u, 0x3EC842CD, 0xBED4AEADu, 0x3F523DCB, 0x3E31EE9C, 0x3EB3EEF8, 0xBED229F4u, 0x3F34D2EF, 0x3F34B03D, 0xBD5CC52Fu, 0x3E42A040, 0x3DC9B5A4, 0xBE7B5F78u, 0x3F460ED0, 0xBE86C729u, 0x3F138A08, 0x3DFBF1BC, 0x3EB42250, 0xBE8A7860u, 0x3EFB97B5, 0x3F378F09, 0x3EFD1ED4, 0x3C2E25A0, 0x3EA592D8, 0xBE4202C8u, 0x3D9E14FF, 0x3F1C6860, 0x3F49B2BC, 0x3DB8103C, 0x3E5A4A51, 0xBE236D98u, 0x3ECFB2B2, 0x3E3A24B3, 0x3F6550E1, 0x3D1EFD7C, 0x3ED6DD7A, 0xBEBF96D4u, 0x3E6D2E5F, 0x3F779A4A, 0x3DD59CDB, 0x3BCE4000, 0x3E15B039, 0xBE0EC912u, 0x3CB29445, 0xBDB3CA13u, 0x3F7EF358, 0xBDABD844u, 0x3E96311C, 0xBE3E18C8u, 0xBEA07AD4u, 0x3EEA3087, 0x3F550A71, 0xBD0CEA1Cu, 0x3ED6BB12, 0xBEAC35A6u, 0xBDCE68F2u, 0x3F75907A, 0x3E872E34, 0xBD9535A0u, 0x3D2333CC, 0xBE3B3D4Eu, 0xBE85F6CFu, 0xBF016EE9u, 0x3F52779B, 0xBE23F9CCu, 0x3E174D61, 0xBE3F016Au, 0xBF0F1341u, 0xBD72A526u, 0x3F53BE73, 0xBD331188u, 0x3ED3B960, 0xBEE766B4u, 0xBE2B7D9Du, 0x3F753C58, 0xBE6E9319u, 0xBE061806u, 0x3EC2E624, 0xBE9C8050u, 0xBEF6852Fu, 0x3F4E0518, 0x3EB1BFF0, 0xBE550DA0u, 0x3E8B47CC, 0xBE8A0E04u, 0xBF4A4AB1u, 0x3EC5B970, 0x3EF3A443, 0xBE1F5A74u, 0x3EBD12F8, 0xBEE51CACu, 0xBF145B7Bu, 0x3F4B0167, 0xBE4073BBu, 0xBE68E424u, 0x3E974538, 0xBEDAEE50u, 0xBF5D0056u, 0x3EFEBAE6, 0xBDADE85Eu, 0xBE66989Cu, 0x3DCF3784, 0xBE899C50u, 0xBF5799D0u, 0xBE9854EFu, 0x3EE639F3, 0xBE868258u, 0x3E2ECC91, 0xBECB56F0u, 0xBF7FE939u, 0xBCC6B5EAu, 0xBC292123u, 0xBE621624u, 0x3E798F09, 0xBF053FCAu, 0xBF51BF65u, 0x3E899917, 0xBF01A5EAu, 0xBDF16260u, 0x3EB30C84, 0xBF0991C0u, 0xBEE06B97u, 0x3F2F5350, 0xBF150431u, 0xBE48FB68u, 0xBB755B40u, 0xBED1695Cu, 0xBF404CECu, 0xBF28C797u, 0xBD05D38Bu, 0xBE36A37Cu, 0x3E0F98E2, 0xBF145704u, 0xBF27AD77u, 0xBDF925CFu, 0xBF3EEB6Du, 0xBE50F3C0u, 0x3D8255E6, 0xBF05ADA2u, 0xBF42B93Fu, 0xBED8D191u, 0xBEFBEBEFu, 0xBDC0FBA8u, 0xBD32BE33u, 0xBE91EDF8u, 0xBEC2EF9Cu, 0xBF4FBF11u, 0x3EE2F528, 0xBDAEDFDAu, 0x3E6A3CB9, 0xBF223584u, 0xBE9C11ABu, 0x3E674E47, 0xBF6CDC32u, 0xBD76361Cu, 0x3FAC00E4, 0xBF244964u, 0xBE59A035u, 0xBE0B2A68u, 0xBF77B87Au, 0x3DAA85E8, 0x3F996118, 0xBF0DBCDEu, 0x3EA50829, 0xBF39D08Fu, 0xBF1B9045u, 0x3C895D00, 0x3FB30427, 0xBF258CDAu, 0x3DCF4A45, 0x3E118335, 0xBF7C12E8u, 0xBC85D350u, 0x3F90A774, 0xBEF5ECB8u, 0xBCD83D54u, 0xBF7068A7u, 0xBEAF6E1Du, 0x3DAE57FC, 0x3FA66A44, 0xBF1F73ACu, 0x3EC49157, 0xBE954181u, 0xBF604AC9u, 0x3D94430E, 0x3F912D5F, 0xBED3DBCCu, 0x3EB4852A, 0xBF6E1698u, 0xBDD420F7u, 0x3E0525C6, 0x3FB6FC7E, 0xBF19C5D4u, 0x3F0F040E, 0x3E600703, 0xBF4CCE76u, 0xBB9A9B16u, 0x3F906EE5, 0xBEA33AD0u, 0xBC42A7D4u, 0xBF75DA5Du, 0x3E8E9755, 0x3E3229E4, 0x3F9CC709, 0xBF017440u, 0x3F3837AB, 0xBF0E6422u, 0xBED4D5C7u, 0x3E6C9880, 0x3FB1C2BA, 0xBEF9C2B4u, 0x3F6BA96F, 0x3C75DCD3, 0xBEC7D8E4u, 0x3E505958, 0x3FC0884A, 0xBEED9144u, 0x3F521A63, 0x3F02EFB1, 0xBE825C01u, 0x3E13AF20, 0x3F970FA9, 0xBEA786ECu, 0x3F19BAD7, 0xBF449616u, 0x3E644789, 0x3DDA9C4C, 0x3FC6E89E, 0xBF09092Au, 0x3EE627C2, 0x3F321B1F, 0xBF0F6D67u, 0x3E7773B4, 0x3FB298E0, 0xBEAE44CCu, 0x3F77DFBE, 0x3DEAC8D2, 0x3E637197, 0x3E66D05C, 0x3FA30CA5, 0xBEB06F48u, 0x3F68B87C, 0xBEC2C291u, 0x3E2E174E, 0x3E1C43B8, 0x3FA114CE, 0xBE6F0A18u, 0x3F236090, 0xBED9171Au, 0x3F24813E, 0x3E295250, 0x3FB2C14D, 0xBE50B180u, 0x3F3436D7, 0x3DB097A8, 0x3F3479DA, 0x3E2769F8, 0x3FC572AA, 0xBE9DFA7Cu, 0x3F3065A6, 0x3F239905, 0x3EAEFEDE, 0x3D4A99DC, 0x3FA29A98, 0xBE2D17D2u, 0x3E74EFF6, 0xBEC3B919u, 0x3F647E73, 0x3DDC8D80, 0x3FCCDAFA, 0xBEC861A8u, 0x3EEDE715, 0x3F62AF3D, 0xBB57CAE2u, 0x3D79256C, 0x3F95F2CB, 0xBE821642u, 0x3E8FD427, 0xBF48B455u, 0x3F0DB612, 0x3CA307C4, 0x3FCB670C, 0xBF05E8B0u, 0x3DDCD084, 0x3F5F0F67, 0xBEF5192Fu, 0x3DAE9930, 0x3FC1974E, 0xBE4F3232u, 0x3EB76616, 0x3F0C7F56, 0x3F415BE7, 0x3DACCEC4, 0x3FB2C667, 0xBE20C504u, 0x3EA1D0D0, 0x3D976ACF, 0x3F7223CB, 0x3C7A4828, 0x3FCB91D4, 0xBE85688Au, 0x3DB588CA, 0x3F59CD80, 0x3F0499E0, 0x3C81A78C, 0x3FD085EE, 0xBEC73590u, 0x3D998E75, 0x3F7F3D29, 0x3C91794A, 0xBDB0107Eu, 0x3FC22E4A, 0xBE484ED8u, 0xBEADF7BEu, 0x3F0F9934, 0x3F414279, 0xBD812CC6u, 0x3FB7830A, 0xBE17E2FAu, 0xBE6B3F47u, 0x3E61627B, 0x3F72B2AC, 0xBD8E8BDCu, 0x3FA69253, 0xBE1EAE34u, 0xBE845B42u, 0xBE8555DEu, 0x3F6E247C, 0xBD0A05E8u, 0x3F9990DD, 0xBE58A420u, 0xBDE21179u, 0xBF3185E6u, 0x3F364599, 0xBE051080u, 0x3FCAF78E, 0xBEA33690u, 0xBEF1E6D0u, 0x3F531B5C, 0x3E9F421A, 0xBE4C2468u, 0x3FC5376A, 0xBEC6B1B8u, 0xBF41866Du, 0x3F2762A0, 0x3D023172, 0xBE6D82B8u, 0x3FB7DEF4, 0xBE921D50u, 0xBF5CF1D8u, 0x3E87A369, 0x3EDC2E88, 0xBE59CFF4u, 0x3FAC03DC, 0xBE764AC0u, 0xBF495F6Du, 0xBDE4B82Au, 0x3F1B759D, 0xBDB32DDCu, 0x3FCD6F1A, 0xBEEE7AB4u, 0xBEA45BD2u, 0x3F678EB0, 0xBE8FB7E6u, 0xBE09A1D4u, 0x3F9AA342, 0xBE7C9FD0u, 0xBF0038E1u, 0xBF24CBC5u, 0x3F141CD6, 0xBE28877Eu, 0x3FC43606, 0xBF02E394u, 0xBF1F7EDDu, 0x3F1E44CD, 0xBEF5578Bu, 0xBE7B49D8u, 0x3FB994B8, 0xBEE66050u, 0xBF6D5B93u, 0x3E96C69F, 0xBE6D1D86u, 0xBE849226u, 0x3FAAA2C7, 0xBEE2D104u, 0xBF7825FFu, 0xBE2E6FF4u, 0xBE35660Du, 0xBE5CAFC0u, 0x3F9D7762, 0xBEB20758u, 0xBF555E66u, 0xBF06D5D2u, 0x3E2B1415, 0xBE3CB140u, 0x3FA6B1C1, 0xBF0FDAC8u, 0xBF347BEBu, 0xBE9818AEu, 0xBF24DBA9u, 0xBE0B59EEu, 0x3F9365EB, 0xBEC0D21Cu, 0xBEF652D1u, 0xBF5FC8EAu, 0x3D87A89A, 0xBCE9E0A0u, 0x3FC3B79A, 0xBF18BAA0u, 0xBD6FD580u, 0x3F1B1C91, 0xBF4B1AEDu, 0xBE284C50u, 0x3FB22ED0, 0xBF190750u, 0xBF218759u, 0x3DB36036, 0xBF45562Cu, 0xBE1B4BB8u, 0x3F987642, 0xBF00241Eu, 0xBF165094u, 0xBF33C026u, 0xBECE3729u, 0xBDD24648u, 0x3FBDD480, 0xBF1A4FC4u, 0xBEC5B99Eu, 0x3EDBDE27, 0xBF50FD63u, 0xBD932142u, 0x3F9C8227, 0xBF1752D6u, 0xBE6718AEu, 0xBF15993Au, 0xBF478BABu, 0xBD808D26u, 0x3FC0E188, 0x3DBCE640, 0xBE48C972u, 0x3F08F785, 0xBF525F39u, 0xBD7E5588u, 0x3FB2F6A6, 0x3D596848, 0xBE51508Au, 0x3DBDB37C, 0xBF797864u, 0xBD9AEB36u, 0x3F9F1E5C, 0x3DB57DD8, 0xBE835C15u, 0xBF021F97u, 0xBF5273B9u, 0xBD182280u, 0x3F8FB7B8, 0x3E8516BC, 0xBDEB118Au, 0xBF79A44Au, 0xBE41F91Cu, 0x3D1C8C08, 0x3FAB90A1, 0x3D565B88, 0x3E258705, 0xBE0775A5u, 0xBF7A5A6Au, 0x3C154C58, 0x3F951BD2, 0x3E18DD58, 0x3DB7E56E, 0xBF4EC9BEu, 0xBF1526E4u, 0x3DAA3698, 0x3FB9DF88, 0x3D9ADD8C, 0x3EBC0303, 0x3EA2F10D, 0xBF5FBE7Au, 0x3DF05574, 0x3FA3B498, 0x3DBD5420, 0x3EFEE955, 0xBEBC7B14u, 0xBF490598u, 0x3D167800, 0x3F8F841C, 0x3EA52928, 0x3E466164, 0xBF7A64C4u, 0x3D9BD16D, 0x3E4F0F68, 0x3FB81717, 0x3E2A575C, 0x3F4E19B6, 0x3E58A8E9, 0xBF0DDCA0u, 0x3E1AE4AA, 0x3F972B06, 0x3E7B4058, 0x3F1BC595, 0xBF428FC5u, 0xBE69D164u, 0x3E5F937C, 0x3FA3657E, 0x3E635278, 0x3F638889, 0xBEB5B5CEu, 0xBE947539u, 0x3D7035C8, 0x3F969D53, 0x3EE4B420, 0x3E81DACB, 0xBF4667BAu, 0x3F142CC9, 0x3E6377C4, 0x3FBB8304, 0x3E784C98, 0x3F6BAD5A, 0x3EB22E25, 0xBE3556B6u, 0x3E14FECC, 0x3F978F20, 0x3EC2BF54, 0x3F22297B, 0xBF379798u, 0x3E94C60D, 0x3E192DD4, 0x3FC6527E, 0x3E557610, 0x3F1C5D2B, 0x3F35217D, 0xBEB5F76Eu, 0x3E7ADB30, 0x3FB05CCE, 0x3EADDE24, 0x3F7EC828, 0xBC9EB6CBu, 0x3DC39159, 0x3D887EAC, 0x3FC90DDE, 0x3E1E3848, 0x3E964BCC, 0x3F4528CA, 0xBF10F8E9u, 0x3E5D78D0, 0x3FBA777E, 0x3ECD8F14, 0x3F59CEC8, 0x3EAFACFD, 0x3ECBC47A, 0x3E55A560, 0x3FA6C094, 0x3ED641BC, 0x3F583AE4, 0xBE940C9Au, 0x3EE6A8CB, 0x3E090FF8, 0x3FCAE6BA, 0x3EAC6A7C, 0x3F0FF811, 0x3F504CB1, 0x3E16BE20, 0x3DD04EEC, 0x3FA1AB76, 0x3F013858, 0x3ED67EED, 0xBED8E8C0u, 0x3F4D99AE, 0x3CF8FC70, 0x3FCFF3F6, 0x3EA0B6FC, 0x3E2B26AE, 0x3F7C4F23, 0x3CD766DB, 0x3E0305B4, 0x3FBE53CE, 0x3EF85E3C, 0x3F076CE6, 0x3EE980F4, 0x3F37351A, 0x3DE7D2F0, 0x3FAE7716, 0x3F05FF30, 0x3EF52279, 0xBC8F82FCu, 0x3F60B4F0, 0xBCFF429Cu, 0x3FB0351C, 0x3F0E1A28, 0xBDC50D0Eu, 0x3B6FE3D0, 0x3F7ECF7F, 0x3B03EC80, 0x3FCA4AB6, 0x3EE86130, 0x3D00977B, 0x3F4F4795, 0x3F16059C, 0x3B9EE9D0, 0x3FBDD1D8, 0x3F080D98, 0x3D25096B, 0x3ED89F76, 0x3F67BA92, 0xBD715B80u, 0x3FCF8C88, 0x3E9FB668, 0xBE4405F9u, 0x3F7AF683, 0x3D454753, 0xBE0F5062u, 0x3FBDB526, 0x3EFA57D4, 0xBEF6E5C6u, 0x3EE8FD6A, 0x3F3FA375, 0xBD2C71A6u, 0x3FA06564, 0x3F065010, 0xBE097708u, 0xBEE4C8D6u, 0x3F626D6B, 0xBE0C42F6u, 0x3FCA89A2, 0x3EBBA954, 0xBF058245u, 0x3F4C6E14, 0x3E99E150, 0xBE64266Cu, 0x3FBBBA88, 0x3ED0FB7C, 0xBF5604A6u, 0x3EBD9B38, 0x3ECF4FE9, 0xBE2CE1E8u, 0x3FAF2220, 0x3EFEA0D0, 0xBF1EC35Fu, 0xBCC17345u, 0x3F48BBA2, 0xBE375060u, 0x3FA2EE7D, 0x3EEB5C28, 0xBF284570u, 0xBECA9741u, 0x3F2431F2, 0xBDED59E4u, 0x3F980B85, 0x3EE07624, 0xBEE746ADu, 0xBF3724E0u, 0x3F08767A, 0xBD19096Eu, 0x3F94E7D1, 0x3EE108F0, 0xBDB7177Cu, 0xBF56A936u, 0x3F0998C8, 0xBE22586Eu, 0x3FC9BF86, 0x3E7DE4A4, 0xBF1B4D91u, 0x3F465D99, 0xBE35E762u, 0xBE823D9Au, 0x3FB831E3, 0x3E9F772C, 0xBF75CDB0u, 0x3E8EC92F, 0x3C8E1046, 0xBE72AB14u, 0x3FA6CCE4, 0x3EC5987C, 0xBF6ACA71u, 0xBE703D44u, 0x3EA4F31E, 0xBE3888D4u, 0x3FC2DA8C, 0x3E401630, 0xBF34AA32u, 0x3F0AB67B, 0xBEE9B580u, 0xBE82B96Cu, 0x3FAC4362, 0x3E68E288, 0xBF72D979u, 0xBDEA387Cu, 0xBE97091Au, 0xBE570EC0u, 0x3F9C5A60, 0x3EAAA7D0, 0xBF4AF2D0u, 0xBF19A5E6u, 0x3DD9A6BC, 0xBE2A772Cu, 0x3FA8AC2B, 0x3DDD1070, 0xBF23733Du, 0xBE6E7DC2u, 0xBF3BCA4Cu, 0xBE2A9938u, 0x3FB8971E, 0x3DE77FEC, 0xBF24E4AAu, 0x3E88F86C, 0xBF3774ACu, 0xBE20523Cu, 0x3F96C73F, 0x3E627E8C, 0xBF17424Du, 0xBF3C6318u, 0xBEA95103u, 0xBD5ABD70u, 0x3FCBC454, 0x3E350CC8, 0xBE29ADEFu, 0x3F5C4531, 0xBEF6B80Bu, 0xBDC2B4E0u, 0x3F91E60A, 0x3EB02494, 0xBEB8F230u, 0xBF6AB2E0u, 0x3E2E69D3, 0xBD8B9BFAu, 0x3F65DA6D, 0xBF750908u, 0xBE82C703u, 0x3EFEBED5, 0xBF5437D4u, 0xBD9C197Eu, 0x3F0BE84D, 0xBF572308u, 0xBE7F7EDEu, 0xBF5C9A6Du, 0xBEE23056u, 0xBD5D61E8u, 0x3F0622DC, 0xBF383664u, 0xBE35A936u, 0xBF7B0708u, 0x3DAB5529, 0xBC998BF6u, 0x3F447197, 0xBF7EEFF4u, 0xBD05D599u, 0xBCDEEAE7u, 0xBF7FC4BBu, 0x3D47E61C, 0x3F0B530F, 0xBF5712E4u, 0x3E65CCF7, 0xBF64758Eu, 0xBEC86B15u, 0x3D532BE0, 0x3F06F1F7, 0xBF385650u, 0x3E644AC5, 0xBF78D476u, 0x3D984871, 0x3D44FB60, 0x3F5E60D7, 0xBF77E674u, 0x3E75F031, 0x3EB9F32F, 0xBF66757Au, 0x3D645AD0, 0x3F1FEAE7, 0xBF72016Cu, 0x3E7065EC, 0xBF109114u, 0xBF4A8B8Bu, 0x3E118938, 0x3F428F8F, 0xBF736854u, 0x3F15D12F, 0xBD854622u, 0xBF4EE9EAu, 0x3E3E3A48, 0x3F235857, 0xBF579488u, 0x3F437805, 0xBF01CFB8u, 0xBECCB6BAu, 0x3E266268, 0x3F620E05, 0xBF660F5Cu, 0x3F2B4506, 0x3EE08B47, 0xBF199D8Fu, 0x3C9BE67C, 0x3F75E2E1, 0xBF694504u, 0x3DDCE720, 0x3F4141D5, 0xBF259B06u, 0x3E787BF0, 0x3F44BFD1, 0xBF4D0528u, 0x3F783A8E, 0xBC707692u, 0xBE79F0A8u, 0x3E205738, 0x3F12C4A7, 0xBF3E8E24u, 0x3F2B97EB, 0xBF3DF901u, 0x3BB8399C, 0x3E74584C, 0x3F3B3C3B, 0xBF2C5BA2u, 0x3F72D6BF, 0xBE3669F4u, 0x3E85F318, 0x3E54DD6C, 0x3F6A091F, 0xBF400778u, 0x3F57131A, 0x3F0AD774, 0xBBB0F22Du, 0x3E42DA24, 0x3F5A7BC3, 0xBF1AC130u, 0x3F478752, 0x3EA934A7, 0x3F08427A, 0x3DE477D0, 0x3F14A3A3, 0xBF1F1502u, 0x3F013270, 0xBF38A052u, 0x3EF2F587, 0x3DE16470, 0x3F7E3A7F, 0xBF4BA688u, 0x3EF2EDA8, 0x3F5B52FB, 0xBE4F0CF9u, 0x3E21ECC8, 0x3F30EB43, 0xBF101C94u, 0x3F28C1A3, 0xBEA33826u, 0x3F2E5907, 0x3CD4ECC8, 0x3F81A682, 0xBF4F2B6Cu, 0x3DDA07F5, 0x3F73D180, 0xBE923AF8u, 0x3D9686C4, 0x3F4B071F, 0xBEFE66DCu, 0x3EAB3475, 0x3DB61FED, 0x3F702FF3, 0xBCF55E7Cu, 0x3F837D13, 0xBF3ABC80u, 0xBD9A76C3u, 0x3F7E81D8, 0x3D9DD7C0, 0x3D9C58D0, 0x3F7D9D31, 0xBF21CAC2u, 0x3EA3B1D6, 0x3F597F83, 0x3ED6C542, 0x3D840644, 0x3F6B62C1, 0xBF0B0DF6u, 0x3E724530, 0x3F14A5CA, 0x3F476D87, 0x3C869894, 0x3F272905, 0xBF04277Au, 0x3DD809CC, 0xBEEF334Au, 0x3F60BA4D, 0xBD6EC828u, 0x3F46CF79, 0xBEF943E8u, 0xBE4CD299u, 0x3D08DD6E, 0x3F7AAE42, 0xBE0722C0u, 0x3F67EA5F, 0xBF0F7DB8u, 0xBEE7AAB8u, 0x3F05B4F7, 0x3F390B20, 0xBE0349B8u, 0x3F7B1481, 0xBF25BC76u, 0xBEE2762Cu, 0x3F517C23, 0x3EBBF201, 0xBE28D924u, 0x3F467E93, 0xBF0A749Au, 0xBF230FC3u, 0x3C8B23A6, 0x3F454D45, 0xBC034260u, 0x3F0D2637, 0xBF1CF5B8u, 0xBA51DE7Au, 0xBF5C7736u, 0x3F021E5C, 0xBDB7FA54u, 0x3F1E99D1, 0xBF0E6E50u, 0xBEA3A9C0u, 0xBF12E0E3u, 0x3F410B7B, 0xBE6FE2ACu, 0x3F62CA65, 0xBF31DC86u, 0xBF615655u, 0x3EE6754B, 0x3E19F4AD, 0xBE375060u, 0x3F2C1763, 0xBF1515BCu, 0xBF31143Du, 0xBEC272E6u, 0x3F1D3F12, 0xBE83D1ACu, 0x3F487FF3, 0xBF2BFDF8u, 0xBF763599u, 0x3D21D8D0, 0x3E8AC666, 0xBDEFE964u, 0x3F7E0F09, 0xBF500E58u, 0xBEE242BBu, 0x3F59718F, 0xBE93BA1Cu, 0xBE4E4830u, 0x3F65CFE3, 0xBF5B58A0u, 0xBF45BE83u, 0x3EF436C7, 0xBED6B110u, 0xBE80C362u, 0x3F3BE1F3, 0xBF4EB8F8u, 0xBF75DDE0u, 0xBD8F6830u, 0xBE8A0BFBu, 0xBE0F9DB6u, 0x3F14BF91, 0xBF239C2Eu, 0xBF09783Du, 0xBF40C8ECu, 0x3EC2A63A, 0xBE6C0B78u, 0x3F24A92B, 0xBF400DA0u, 0xBF5D7C51u, 0xBF005DEAu, 0x3BB8656D, 0xBE49B8C8u, 0x3F2E1757, 0xBF635D10u, 0xBF3ABF14u, 0xBEBB30C3u, 0xBF13FE08u, 0xBE255AECu, 0x3F51C81D, 0xBF705C68u, 0xBF1D1CFDu, 0x3E21F62C, 0xBF460523u, 0xBE1B2D30u, 0x3F0FD0FC, 0xBF481AF0u, 0xBF11F150u, 0xBF4E2092u, 0xBE274076u, 0xBDD94D08u, 0x3F2DAA63, 0xBF75F088u, 0xBEBA4A7Au, 0xBEC6EB6Cu, 0xBF58B862u, 0xFF, 0x0 };

Sint16 cnk_Sphere_002_poly[] = { 0x2513, 0x4, 0xFFFFu, 0xFFFFu, 0xFFFFu, 0xFF, 0x8, 0x6000, 0x1041, 0x8F6, 0x61, 0xFFF5u, 0x28, 0x94, 0xCE, 0x24, 0x9A, 0xD6, 0x2D, 0x93, 0xD3, 0x25, 0x96, 0xD8, 0x0, 0x8F, 0xDB, 0x29, 0x98, 0xDF, 0x2B, 0x93, 0xE3, 0x2A, 0x96, 0xEB, 0x3, 0x8D, 0xEC, 0x2C, 0x8B, 0xF4, 0x9, 0x86, 0xEF, 0x7, 0x2C, 0x8B, 0xF4, 0x27, 0x96, 0xF3, 0x2A, 0x96, 0xEB, 0x26, 0x9B, 0xE8, 0x29, 0x98, 0xDF, 0x21, 0x9B, 0xDE, 0x24, 0x9A, 0xD6, 0xFFF1u, 0xF, 0x67, 0xC6, 0x12, 0x76, 0xCD, 0x1F, 0x6A, 0xCD, 0x19, 0x71, 0xD1, 0x20, 0x6A, 0xD5, 0x1A, 0x71, 0xD8, 0x1D, 0x6C, 0xDE, 0x1B, 0x71, 0xDF, 0x1C, 0x70, 0xE7, 0x13, 0x76, 0xE5, 0x18, 0x73, 0xED, 0x14, 0x79, 0xED, 0x1E, 0x6F, 0xF3, 0x15, 0x7D, 0xF4, 0x2C, 0x7E, 0xFA, 0x8, 0x59, 0x36, 0xD0, 0x5C, 0x35, 0xD6, 0x57, 0x39, 0xDA, 0x5B, 0x35, 0xE1, 0x56, 0x3A, 0xE0, 0x5A, 0x38, 0xE9, 0x54, 0x3B, 0xE7, 0x58, 0x3A, 0xEF, 0xFFF2u, 0x95, 0x64, 0x38, 0xB1, 0x67, 0x32, 0xAB, 0x6F, 0x36, 0xAA, 0x6E, 0x2E, 0xA0, 0x75, 0x30, 0xA5, 0x75, 0x27, 0x9E, 0x79, 0x25, 0xA4, 0x75, 0x1F, 0x9F, 0x79, 0x19, 0xA6, 0x73, 0x18, 0xA1, 0x79, 0x11, 0xA7, 0x74, 0xF, 0x9A, 0x82, 0xE, 0xA3, 0x80, 0x8, 0xFFF2u, 0xE1, 0x29, 0x38, 0xC9, 0x1C, 0x34, 0xC5, 0x2A, 0x31, 0xCB, 0x21, 0x2E, 0xC7, 0x26, 0x28, 0xC8, 0x24, 0x22, 0xC4, 0x28, 0x1E, 0xC6, 0x23, 0x17, 0xC3, 0x29, 0x13, 0xCE, 0x23, 0xB, 0xBD, 0x31, 0xE, 0xEB, 0x1E, 0x9, 0xE5, 0x39, 0x12, 0xE2, 0x3B, 0xC, 0xFFF0u, 0xE6, 0x5, 0x22, 0xE3, 0x6, 0x1B, 0xE4, 0x6, 0x25, 0xDD, 0xA, 0x1D, 0xDE, 0xC, 0x26, 0xDA, 0xE, 0x1F, 0xD6, 0x11, 0x27, 0xD8, 0x12, 0x20, 0xD5, 0x17, 0x27, 0xD4, 0x17, 0x1F, 0xCF, 0x1B, 0x1D, 0xD1, 0x19, 0x14, 0xCA, 0x20, 0x18, 0xCC, 0x1F, 0x11, 0xC6, 0x23, 0x17, 0xCE, 0x23, 0xB, 0xA, 0xCC, 0x1F, 0x11, 0xCE, 0x23, 0xB, 0xD1, 0x19, 0x14, 0xD3, 0x14, 0x10, 0xD7, 0x13, 0x19, 0xD9, 0xF, 0x10, 0xDC, 0xC, 0x15, 0xE2, 0x8, 0x11, 0xDD, 0xA, 0x1D, 0xE3, 0x6, 0x1B, 0xFFFBu, 0xCE, 0x23, 0xB, 0xD3, 0x14, 0x10, 0xEB, 0x1E, 0x9, 0xD9, 0xF, 0x10, 0xE2, 0x8, 0x11, 0xFFFAu, 0xDD, 0xA, 0x1D, 0xDC, 0xC, 0x15, 0xDA, 0xE, 0x1F, 0xD7, 0x13, 0x19, 0xD8, 0x12, 0x20, 0xD4, 0x17, 0x1F, 0xA, 0xE3, 0x3B, 0x1C, 0xE5, 0x39, 0x12, 0xE6, 0x38, 0x1E, 0xE9, 0x35, 0x15, 0xE8, 0x33, 0x1C, 0xBE, 0x2F, 0x15, 0xBF, 0x2F, 0x1F, 0xC1, 0x2C, 0x19, 0xC4, 0x28, 0x1E, 0xC3, 0x29, 0x13, 0xA, 0xE4, 0x3B, 0x27, 0xE6, 0x38, 0x1E, 0xE7, 0x38, 0x29, 0xEA, 0x33, 0x27, 0xEC, 0x34, 0x30, 0xC0, 0x2F, 0x2D, 0xC5, 0x2A, 0x31, 0xC2, 0x2C, 0x26, 0xC7, 0x26, 0x28, 0xC4, 0x28, 0x1E, 0xFFF8u, 0xC5, 0x2A, 0x31, 0xEC, 0x34, 0x30, 0xE1, 0x18, 0x36, 0xE0, 0x10, 0x30, 0xDB, 0x10, 0x2F, 0xDF, 0x9, 0x2A, 0xDE, 0xC, 0x26, 0xE4, 0x6, 0x25, 0xFFFBu, 0xC4, 0x28, 0x1E, 0xBF, 0x2F, 0x1F, 0xC2, 0x2C, 0x26, 0xEA, 0x33, 0x27, 0xC0, 0x2F, 0x2D, 0x4, 0xE4, 0x6, 0x25, 0xE7, 0x5, 0x2C, 0xDF, 0x9, 0x2A, 0xE0, 0x10, 0x30, 0xFFFDu, 0xE0, 0x30, 0x31, 0xEC, 0x34, 0x30, 0xE7, 0x38, 0x29, 0x4, 0xBF, 0x2F, 0x1F, 0xEA, 0x33, 0x27, 0xE8, 0x33, 0x1C, 0xE6, 0x38, 0x1E, 0xD, 0x5E, 0xE5, 0xC7, 0x88, 0xC5, 0xCD, 0x80, 0xCE, 0xCA, 0x83, 0xC8, 0xD0, 0x7D, 0xD1, 0xD2, 0x81, 0xCD, 0xD6, 0x78, 0xD3, 0xDD, 0x7C, 0xD0, 0xDF, 0x7B, 0xD3, 0xEA, 0x7F, 0xCC, 0xE7, 0x7E, 0xCE, 0xF0, 0x85, 0xC7, 0xE7, 0x8C, 0xE2, 0xF4, 0xFFE6u, 0x51, 0x21, 0xF8, 0x4B, 0x17, 0xF3, 0x3F, 0x27, 0xF2, 0x42, 0x1C, 0xED, 0x3A, 0x24, 0xED, 0x3D, 0x21, 0xE4, 0x38, 0x24, 0xE6, 0x3C, 0x23, 0xDD, 0x36, 0x28, 0xE3, 0x35, 0x28, 0xDD, 0x33, 0x2A, 0xD8, 0x37, 0x25, 0xD8, 0x39, 0x23, 0xD2, 0x3E, 0x20, 0xD6, 0x44, 0x1B, 0xCF, 0x45, 0x1A, 0xD5, 0x4C, 0x14, 0xD0, 0x48, 0x14, 0xD9, 0x4E, 0x10, 0xD5, 0x4D, 0x10, 0xDF, 0x4F, 0xC, 0xDE, 0x50, 0xF, 0xE7, 0x54, 0x9, 0xE6, 0x52, 0xE, 0xED, 0x58, 0x9, 0xEF, 0x51, 0x1A, 0xF5, 0xE, 0x35, 0x28, 0xDD, 0x37, 0x25, 0xD8, 0x3C, 0x23, 0xDD, 0x3E, 0x20, 0xD6, 0x40, 0x1E, 0xDD, 0x45, 0x1A, 0xD5, 0x43, 0x1B, 0xDE, 0x46, 0x17, 0xDD, 0x47, 0x19, 0xE6, 0x49, 0x14, 0xE4, 0x4A, 0x16, 0xEC, 0x52, 0xE, 0xED, 0x4B, 0x17, 0xF3, 0x51, 0x1A, 0xF5, 0xC, 0xA3, 0x89, 0x7, 0x9A, 0x82, 0xE, 0xB8, 0x90, 0xC, 0x94, 0x87, 0x15, 0x90, 0x8D, 0x15, 0x92, 0x8B, 0x1D, 0x8E, 0x90, 0x1A, 0xBC, 0x90, 0x22, 0xB6, 0x95, 0x1F, 0xBA, 0x94, 0x27, 0xB4, 0x9A, 0x21, 0xB5, 0x9A, 0x2A, 0xFFF5u, 0x28, 0x78, 0xCE, 0x1F, 0x6A, 0xCD, 0x24, 0x66, 0xD6, 0x20, 0x6A, 0xD5, 0x21, 0x68, 0xDD, 0x1D, 0x6C, 0xDE, 0x22, 0x6A, 0xE6, 0x1C, 0x70, 0xE7, 0x23, 0x6B, 0xEC, 0x18, 0x73, 0xED, 0x1E, 0x6F, 0xF3, 0xFFF9u, 0x21, 0x68, 0xDD, 0x22, 0x6A, 0xE6, 0x26, 0x66, 0xE8, 0x23, 0x6B, 0xEC, 0x27, 0x6F, 0xF3, 0x1E, 0x6F, 0xF3, 0x2C, 0x72, 0xFA, 0xFFF8u, 0xA3, 0x98, 0x5, 0xB0, 0x6F, 0xC, 0xB8, 0x90, 0xC, 0xB2, 0x9B, 0x11, 0xBB, 0x94, 0x11, 0xB9, 0x95, 0x18, 0x8E, 0x90, 0x1A, 0xB6, 0x95, 0x1F, 0xFFFBu, 0xB2, 0x9B, 0x11, 0xB3, 0x9B, 0x1A, 0xB9, 0x95, 0x18, 0xB4, 0x9A, 0x21, 0xB6, 0x95, 0x1F, 0xFFF6u, 0xE1, 0x18, 0x36, 0xDB, 0x10, 0x2F, 0xC9, 0x1C, 0x34, 0xD2, 0x18, 0x2D, 0xCB, 0x21, 0x2E, 0xD0, 0x1D, 0x27, 0xC8, 0x24, 0x22, 0xCD, 0x1E, 0x20, 0xC6, 0x23, 0x17, 0xCA, 0x20, 0x18, 0xFFFDu, 0x29, 0x98, 0xDF, 0x25, 0x96, 0xD8, 0x24, 0x9A, 0xD6, 0xFFFBu, 0x52, 0xE, 0xED, 0x50, 0xF, 0xE7, 0x49, 0x14, 0xE4, 0x4D, 0x10, 0xDF, 0x48, 0x14, 0xD9, 0x7, 0x3C, 0x23, 0xDD, 0x40, 0x1E, 0xDD, 0x3D, 0x21, 0xE4, 0x41, 0x1E, 0xE6, 0x42, 0x1C, 0xED, 0x47, 0x19, 0xE6, 0x4A, 0x16, 0xEC, 0x4, 0x47, 0x19, 0xE6, 0x41, 0x1E, 0xE6, 0x43, 0x1B, 0xDE, 0x40, 0x1E, 0xDD, 0x4, 0x45, 0x1A, 0xD5, 0x48, 0x14, 0xD9, 0x46, 0x17, 0xDD, 0x49, 0x14, 0xE4, 0xFFFDu, 0x42, 0x1C, 0xED, 0x4B, 0x17, 0xF3, 0x4A, 0x16, 0xEC, 0x12, 0x6D, 0xF2, 0xF9, 0x8C, 0xE2, 0xF4, 0x68, 0xE9, 0xF4, 0x61, 0xF2, 0xF0, 0x67, 0xE8, 0xED, 0x60, 0xF0, 0xEA, 0x66, 0xEA, 0xE7, 0x62, 0xEE, 0xE4, 0x63, 0xEB, 0xDB, 0x5F, 0xEF, 0xDD, 0x8D, 0xF1, 0xD3, 0x8A, 0xF4, 0xDB, 0x87, 0xF8, 0xD7, 0x8B, 0xF5, 0xE1, 0x86, 0xFA, 0xDF, 0x89, 0xF7, 0xE9, 0x85, 0xFB, 0xEA, 0x8C, 0xF2, 0xF1, 0x5, 0x86, 0xFA, 0xDF, 0x84, 0xFA, 0xD7, 0x87, 0xF8, 0xD7, 0x83, 0xFB, 0xD2, 0x88, 0xF8, 0xCD, 0xFFF9u, 0x8C, 0xF2, 0xF1, 0x61, 0xF2, 0xF0, 0x89, 0xF7, 0xE9, 0x60, 0xF0, 0xEA, 0x8B, 0xF5, 0xE1, 0x62, 0xEE, 0xE4, 0x5F, 0xEF, 0xDD, 0xC, 0x87, 0xF8, 0xD7, 0x88, 0xF8, 0xCD, 0x8D, 0xF1, 0xD3, 0x5E, 0xE2, 0xC8, 0x64, 0xEB, 0xD0, 0x6B, 0xE3, 0xD0, 0x65, 0xE8, 0xD5, 0x6A, 0xE4, 0xD9, 0x69, 0xE6, 0xDF, 0x6C, 0xE3, 0xE4, 0x66, 0xEA, 0xE7, 0x67, 0xE8, 0xED, 0x5, 0x8D, 0xF1, 0xD3, 0x64, 0xEB, 0xD0, 0x63, 0xEB, 0xDB, 0x65, 0xE8, 0xD5, 0x69, 0xE6, 0xDF, 0x6, 0x54, 0x9, 0xE6, 0x4F, 0xC, 0xDE, 0x56, 0x9, 0xE1, 0x53, 0xB, 0xD7, 0x57, 0x8, 0xD8, 0x59, 0x11, 0xD0, 0xFFFAu, 0x4F, 0xC, 0xDE, 0x53, 0xB, 0xD7, 0x4E, 0x10, 0xD5, 0x59, 0x11, 0xD0, 0x4C, 0x14, 0xD0, 0x55, 0x24, 0xC9, 0xFFF4u, 0x55, 0x24, 0xC9, 0x59, 0x11, 0xD0, 0x2E, 0x31, 0xCC, 0x5C, 0x35, 0xD6, 0x31, 0x2F, 0xD5, 0x5D, 0x30, 0xDF, 0x33, 0x2A, 0xD8, 0x32, 0x2C, 0xE3, 0x36, 0x28, 0xE3, 0x34, 0x2A, 0xEA, 0x38, 0x24, 0xE6, 0x3A, 0x24, 0xED, 0xFFFAu, 0x3A, 0x24, 0xED, 0x34, 0x2A, 0xEA, 0x3F, 0x27, 0xF2, 0x30, 0x32, 0xEE, 0x51, 0x1A, 0xF5, 0x58, 0x3A, 0xEF, 0xFFF9u, 0x58, 0x3A, 0xEF, 0x30, 0x32, 0xEE, 0x5A, 0x38, 0xE9, 0x2F, 0x31, 0xE8, 0x5B, 0x35, 0xE1, 0x5D, 0x30, 0xDF, 0x5C, 0x35, 0xD6, 0x5, 0x5D, 0x30, 0xDF, 0x32, 0x2C, 0xE3, 0x2F, 0x31, 0xE8, 0x34, 0x2A, 0xEA, 0x30, 0x32, 0xEE, 0xFFFDu, 0x63, 0xEB, 0xDB, 0x66, 0xEA, 0xE7, 0x69, 0xE6, 0xDF, 0xFFF8u, 0x5E, 0xE2, 0xC8, 0x6B, 0xE3, 0xD0, 0x72, 0xDB, 0xCB, 0x75, 0xDC, 0xD4, 0x7A, 0xD5, 0xCF, 0x77, 0xD7, 0xD9, 0x7D, 0xD1, 0xD2, 0x78, 0xD3, 0xDD, 0x5, 0x7D, 0xD1, 0xD2, 0x7A, 0xD5, 0xCF, 0x80, 0xCE, 0xCA, 0x72, 0xDB, 0xCB, 0x5E, 0xCE, 0xC5, 0xFFF4u, 0x2C, 0x8D, 0xF5, 0x15, 0x7D, 0xF4, 0x9, 0x86, 0xEF, 0xE, 0x7F, 0xED, 0xB, 0x82, 0xE5, 0x11, 0x7B, 0xE6, 0xD, 0x7C, 0xE0, 0x16, 0x76, 0xDD, 0x10, 0x7C, 0xD7, 0x17, 0x76, 0xD4, 0x12, 0x76, 0xCD, 0x19, 0x71, 0xD1, 0x8, 0x15, 0x7D, 0xF4, 0xE, 0x7F, 0xED, 0x14, 0x79, 0xED, 0x11, 0x7B, 0xE6, 0x13, 0x76, 0xE5, 0x16, 0x76, 0xDD, 0x1B, 0x71, 0xDF, 0x1A, 0x71, 0xD8, 0x4, 0x16, 0x76, 0xDD, 0x17, 0x76, 0xD4, 0x1A, 0x71, 0xD8, 0x19, 0x71, 0xD1, 0xFFFAu, 0x83, 0xC8, 0xD0, 0x81, 0xCD, 0xD6, 0x84, 0xC6, 0xD7, 0x82, 0xCA, 0xDE, 0x86, 0xC5, 0xE0, 0x85, 0xC7, 0xE7, 0xFFFBu, 0x81, 0xCD, 0xD6, 0x7C, 0xD0, 0xDF, 0x82, 0xCA, 0xDE, 0x7F, 0xCC, 0xE7, 0x85, 0xC7, 0xE7, 0xFFFDu, 0x8B, 0xF5, 0xE1, 0x5F, 0xEF, 0xDD, 0x8A, 0xF4, 0xDB, 0x10, 0xF8, 0xCA, 0x6, 0x110, 0xCF, 0xE, 0x101, 0xD7, 0xB, 0x103, 0xD2, 0x10, 0xFF, 0xDC, 0x10, 0x104, 0xD6, 0x18, 0xFC, 0xDD, 0x18, 0xFD, 0xDA, 0x20, 0xFB, 0xDF, 0x25, 0x100, 0xDB, 0x2B, 0xFA, 0xE4, 0x2C, 0xFE, 0xDF, 0x32, 0xF2, 0xE8, 0x32, 0x10B, 0xDD, 0x37, 0xEF, 0xEF, 0x32, 0x113, 0xD2, 0x31, 0xFFF8u, 0xA3, 0x80, 0x8, 0xA7, 0x74, 0xF, 0xB0, 0x6F, 0xC, 0xAC, 0x6C, 0x16, 0xAD, 0x68, 0x16, 0xAE, 0x69, 0x20, 0xB3, 0x64, 0x19, 0xB4, 0x64, 0x22, 0x4, 0xB3, 0x64, 0x19, 0xAD, 0x68, 0x16, 0xB2, 0x64, 0x11, 0xB0, 0x6F, 0xC, 0xFFF8u, 0xA7, 0x74, 0xF, 0xA6, 0x73, 0x18, 0xAC, 0x6C, 0x16, 0xA8, 0x6F, 0x1F, 0xAE, 0x69, 0x20, 0xAF, 0x69, 0x28, 0xB4, 0x64, 0x22, 0xB5, 0x64, 0x2B, 0x6, 0xA6, 0x73, 0x18, 0xA8, 0x6F, 0x1F, 0xA4, 0x75, 0x1F, 0xA9, 0x70, 0x25, 0xA5, 0x75, 0x27, 0xAA, 0x6E, 0x2E, 0x5, 0xB5, 0x64, 0x2B, 0xB1, 0x67, 0x32, 0xAF, 0x69, 0x28, 0xAA, 0x6E, 0x2E, 0xA9, 0x70, 0x25, 0xE, 0x101, 0xD7, 0xB, 0xFF, 0xDC, 0x10, 0xF8, 0xE7, 0xB, 0xF7, 0xE3, 0x14, 0xF3, 0xE9, 0x11, 0xF5, 0xE7, 0x1A, 0xF0, 0xEC, 0x18, 0xF4, 0xEA, 0x22, 0x118, 0xEF, 0x1E, 0xEE, 0xEF, 0x2A, 0x115, 0xF2, 0x20, 0x117, 0xF3, 0x2B, 0x114, 0xF6, 0x28, 0x113, 0xEF, 0x31, 0x4, 0x8E, 0x90, 0x1A, 0xBB, 0x94, 0x11, 0x90, 0x8D, 0x15, 0xB8, 0x90, 0xC, 0xFFFAu, 0xC1, 0x2C, 0x19, 0xC3, 0x29, 0x13, 0xBE, 0x2F, 0x15, 0xBD, 0x31, 0xE, 0xE9, 0x35, 0x15, 0xE5, 0x39, 0x12, 0xA, 0x6D, 0xD8, 0xF6, 0x68, 0xE9, 0xF4, 0x71, 0xDE, 0xF1, 0x6E, 0xE3, 0xED, 0x76, 0xDC, 0xE8, 0x70, 0xDF, 0xE2, 0x73, 0xDB, 0xDE, 0x6F, 0xE0, 0xD9, 0x75, 0xDC, 0xD4, 0x6B, 0xE3, 0xD0, 0xFFFAu, 0x6B, 0xE3, 0xD0, 0x6A, 0xE4, 0xD9, 0x6F, 0xE0, 0xD9, 0x6C, 0xE3, 0xE4, 0x70, 0xDF, 0xE2, 0x6E, 0xE3, 0xED, 0x8, 0x75, 0xDC, 0xD4, 0x77, 0xD7, 0xD9, 0x73, 0xDB, 0xDE, 0x79, 0xD6, 0xE4, 0x76, 0xDC, 0xE8, 0x74, 0xD8, 0xEE, 0x71, 0xDE, 0xF1, 0x6D, 0xD4, 0xF6, 0x4, 0x68, 0xE9, 0xF4, 0x67, 0xE8, 0xED, 0x6E, 0xE3, 0xED, 0x6C, 0xE3, 0xE4, 0x8, 0x77, 0xD7, 0xD9, 0x78, 0xD3, 0xDD, 0x79, 0xD6, 0xE4, 0x7B, 0xD3, 0xEA, 0x74, 0xD8, 0xEE, 0x7E, 0xCE, 0xF0, 0x6D, 0xD4, 0xF6, 0x8C, 0xE2, 0xF4, 0xFFF7u, 0xCA, 0x20, 0x18, 0xCD, 0x1E, 0x20, 0xCF, 0x1B, 0x1D, 0xD0, 0x1D, 0x27, 0xD5, 0x17, 0x27, 0xD2, 0x18, 0x2D, 0xD6, 0x11, 0x27, 0xDB, 0x10, 0x2F, 0xDE, 0xC, 0x26, 0xFFFDu, 0xD4, 0x17, 0x1F, 0xD7, 0x13, 0x19, 0xD1, 0x19, 0x14, 0xFFFDu, 0xE2, 0x8, 0x11, 0xE3, 0x6, 0x1B, 0xE5, 0x5, 0x12, 0xC, 0xFF, 0xDC, 0x10, 0xFC, 0xDD, 0x18, 0xF7, 0xE3, 0x14, 0xF9, 0xE2, 0x1F, 0xF5, 0xE7, 0x1A, 0xF6, 0xE5, 0x24, 0xF4, 0xEA, 0x22, 0xF1, 0xEA, 0x2A, 0xEE, 0xEF, 0x2A, 0xEF, 0xEF, 0x32, 0x117, 0xF3, 0x2B, 0x113, 0xEF, 0x31, 0xFFF8u, 0xEF, 0xEF, 0x32, 0xF2, 0xE8, 0x32, 0xF1, 0xEA, 0x2A, 0xFA, 0xE4, 0x2C, 0xF6, 0xE5, 0x24, 0xFB, 0xDF, 0x25, 0xF9, 0xE2, 0x1F, 0xFC, 0xDD, 0x18, 0xFFFAu, 0x4C, 0x14, 0xD0, 0x55, 0x18, 0xCA, 0x44, 0x1B, 0xCF, 0x3B, 0x27, 0xCE, 0x39, 0x23, 0xD2, 0x33, 0x2A, 0xD8, 0x5, 0x33, 0x2A, 0xD8, 0x31, 0x2F, 0xD5, 0x3B, 0x27, 0xCE, 0x2E, 0x31, 0xCC, 0x55, 0x25, 0xC8, 0xFFF4u, 0x95, 0x7D, 0x3B, 0xAB, 0x6F, 0x36, 0xA2, 0x7E, 0x36, 0xA0, 0x75, 0x30, 0x9D, 0x7C, 0x2D, 0x9E, 0x79, 0x25, 0x9C, 0x80, 0x28, 0x9B, 0x7E, 0x21, 0x97, 0x83, 0x1C, 0x98, 0x80, 0x16, 0x94, 0x87, 0x15, 0x9A, 0x82, 0xE, 0xFFF8u, 0x94, 0x87, 0x15, 0x92, 0x8B, 0x1D, 0x97, 0x83, 0x1C, 0x96, 0x86, 0x25, 0x9C, 0x80, 0x28, 0x99, 0x82, 0x2F, 0x9D, 0x7C, 0x2D, 0xA2, 0x7E, 0x36, 0xFFF7u, 0xA2, 0x7E, 0x36, 0x99, 0x82, 0x2F, 0x95, 0x88, 0x37, 0x93, 0x89, 0x30, 0x91, 0x8F, 0x2C, 0x96, 0x86, 0x25, 0x8F, 0x8B, 0x25, 0x92, 0x8B, 0x1D, 0xBC, 0x90, 0x22, 0xFFF9u, 0x8F, 0x8B, 0x25, 0xBC, 0x90, 0x22, 0x91, 0x8F, 0x2C, 0xBA, 0x94, 0x27, 0xB7, 0x96, 0x30, 0xB5, 0x9A, 0x2A, 0xB1, 0x9C, 0x32, 0xFFFDu, 0x96, 0x86, 0x25, 0x93, 0x89, 0x30, 0x99, 0x82, 0x2F, 0x6, 0x9A, 0x82, 0xE, 0xA1, 0x79, 0x11, 0x98, 0x80, 0x16, 0x9F, 0x79, 0x19, 0x9B, 0x7E, 0x21, 0x9E, 0x79, 0x25, 0x4, 0xB1, 0x9C, 0x32, 0xB7, 0x96, 0x30, 0x95, 0x88, 0x37, 0x91, 0x8F, 0x2C, 0xFFF2u, 0x1F, 0x72, 0xCB, 0x28, 0x78, 0xCE, 0xF, 0x8A, 0xCA, 0x2D, 0x93, 0xD3, 0x2, 0x8A, 0xCF, 0x4, 0x8A, 0xD5, 0xC, 0x81, 0xD0, 0x7, 0x86, 0xD8, 0xA, 0x81, 0xDA, 0x8, 0x84, 0xDF, 0xB, 0x82, 0xE5, 0x6, 0x87, 0xE4, 0x9, 0x86, 0xEF, 0x3, 0x8D, 0xEC, 0xFFF9u, 0xB, 0x82, 0xE5, 0xD, 0x7C, 0xE0, 0xA, 0x81, 0xDA, 0x10, 0x7C, 0xD7, 0xC, 0x81, 0xD0, 0x12, 0x76, 0xCD, 0xF, 0x8A, 0xCA, 0xFFFAu, 0x2D, 0x93, 0xD3, 0x0, 0x8F, 0xDB, 0x4, 0x8A, 0xD5, 0x5, 0x8A, 0xDE, 0x7, 0x86, 0xD8, 0x8, 0x84, 0xDF, 0x6, 0x8, 0x84, 0xDF, 0x6, 0x87, 0xE4, 0x5, 0x8A, 0xDE, 0x1, 0x8D, 0xE5, 0x0, 0x8F, 0xDB, 0x2B, 0x93, 0xE3, 0x4, 0x6, 0x87, 0xE4, 0x3, 0x8D, 0xEC, 0x1, 0x8D, 0xE5, 0x2B, 0x93, 0xE3, 0xFFFDu, 0x2, 0x8A, 0xCF, 0xC, 0x81, 0xD0, 0xF, 0x8A, 0xCA, 0xFFFDu, 0xAF, 0x69, 0x28, 0xA8, 0x6F, 0x1F, 0xA9, 0x70, 0x25, 0xFFF7u, 0x100, 0xDB, 0x2B, 0xFE, 0xDF, 0x32, 0x106, 0xD5, 0x30, 0x10B, 0xDD, 0x37, 0x10C, 0xCE, 0x32, 0x113, 0xD2, 0x31, 0x10E, 0xCB, 0x2C, 0x114, 0xC7, 0x29, 0x10F, 0xC9, 0x22, 0x9, 0x100, 0xDB, 0x2B, 0xFD, 0xDA, 0x20, 0x102, 0xD6, 0x26, 0x105, 0xD6, 0x1F, 0x107, 0xD1, 0x28, 0x108, 0xD0, 0x1F, 0x10A, 0xCE, 0x27, 0x10F, 0xC9, 0x22, 0x10E, 0xCB, 0x2C, 0xFFFAu, 0xFD, 0xDA, 0x20, 0x105, 0xD6, 0x1F, 0x104, 0xD6, 0x18, 0x109, 0xCF, 0x17, 0x103, 0xD2, 0x10, 0x110, 0xCF, 0xE, 0x6, 0x100, 0xDB, 0x2B, 0x102, 0xD6, 0x26, 0x106, 0xD5, 0x30, 0x107, 0xD1, 0x28, 0x10C, 0xCE, 0x32, 0x10E, 0xCB, 0x2C, 0xFFFDu, 0x10A, 0xCE, 0x27, 0x107, 0xD1, 0x28, 0x10E, 0xCB, 0x2C, 0xFFFAu, 0x105, 0xD6, 0x1F, 0x108, 0xD0, 0x1F, 0x109, 0xCF, 0x17, 0x10D, 0xCA, 0x1B, 0x110, 0xCF, 0xE, 0x111, 0xC7, 0x14, 0x4, 0x108, 0xD0, 0x1F, 0x10D, 0xCA, 0x1B, 0x10F, 0xC9, 0x22, 0x111, 0xC7, 0x14, 0xFFFBu, 0x111, 0xF7, 0x15, 0x10F, 0xF8, 0x20, 0x112, 0xF6, 0x20, 0x114, 0xF6, 0x28, 0x115, 0xF2, 0x20, 0xFFF9u, 0x115, 0xF2, 0x20, 0x118, 0xEF, 0x1E, 0x116, 0xF2, 0x17, 0xF0, 0xEC, 0x18, 0xED, 0xF0, 0x10, 0xF3, 0xE9, 0x11, 0xF8, 0xE7, 0xB, 0xFFF9u, 0xF8, 0xE7, 0xB, 0x110, 0xCF, 0xE, 0xED, 0xF0, 0x10, 0x111, 0xF7, 0x15, 0x116, 0xF2, 0x17, 0x112, 0xF6, 0x20, 0x115, 0xF2, 0x20, 0xFF };

NJS_CNK_MODEL cnk_Sphere_002 = { cnk_Sphere_002_vtx, cnk_Sphere_002_poly, { -0.0071066027f, 0.77435434f, -0.03700841f }, 0.95893663f };

NJS_OBJECT Orbs = { NJD_EVAL_UNIT_POS | NJD_EVAL_UNIT_ANG | NJD_EVAL_UNIT_SCL | NJD_EVAL_BREAK, &cnk_Sphere_002, 0, 0, 0, 0, 0, 0, 1, 1, 1, NULL, NULL };
#pragma endregion

void APIconObject_Delete(ObjectMaster* obj)
{
	ChaoGardenManager::GetInstance().ReleaseAPTextures();
	ChaoGardenManager::GetInstance().apIconObjPtr = nullptr;
}

void APIconObject_Main(ObjectMaster* obj)
{
	if (GameState != GameStates_LoadFinished && GameState != GameStates_LoadLevel)
	{
		return;
	}

	if (obj->Data1.Entity->Action == 0)
	{
		obj->DeleteSub = APIconObject_Delete;
		obj->Data1.Entity->Action = 1;
	}
}
// End Black Market Assets


void ChaoGardenManager::OnInitFunction(const char* path, const HelperFunctions& helperFunctions)
{
	this->_helperFunctions = &helperFunctions;
	this->_archipelagoManager = &ArchipelagoManager::getInstance();

}

void ChaoGardenManager::OnFrameFunction()
{
	if (!this->_archipelagoManager->IsInit() || !this->_archipelagoManager->IsAuth())
	{
		//Make No Characters have Chao Garden Access
		WriteData<8>((void*)0x1DEF829, 0x00);

		return;
	}

	//Make All Characters have Chao Garden Access
	WriteData<8>((void*)0x1DEF829, 0x01);

	if (!this->_chaoEnabled)
	{
		return;
	}

	// Make sure Hero/Dark Gardens are always unlocked
	ChaoGardensUnlocked = 0x56;

	// Remove Hero/Dark Race restrictions
	WriteData<2>((void*)0x531774, '\x90');
	WriteData<2>((void*)0x5314CF, '\x90');

	// Handle Separate Chao Saves
	std::string chaoFileName = ArchipelagoManager::getInstance().GetSeedNameAndPlayer().substr(0, 12);

	for (int i = 0; i < 12; i++)
	{
		WriteData<1>((void*)(0x8ACF4B + i), chaoFileName[i]);
		WriteData<1>((void*)(0xC70E5C + i), chaoFileName[i]);
		WriteData<1>((void*)(0x1366067 + i), chaoFileName[i]);
	}

	if (CurrentLevel != LevelIDs::LevelIDs_ChaoWorld)
	{
		return;
	}

	// Prevent Game Overs in Chao Garden
	Life_Count[0] = 3;

	this->HandleStartingEggs();
	this->HandleSubsequentEggs();

	// Handle Time Scale
	ChaoGardenTimescale = 120.0f / this->_timescale;

	// Black Market
	if (this->_blackMarketSlots > 0)
	{
		// Write jump at first 5 bytes here to function handling sending location check
		WriteCall(static_cast<void*>((void*)0x58AFD5), &BlackMarketPurchase);
		WriteData<3>((void*)0x58AFDA, '\x90');
		WriteData<5>((void*)0x58AFDF, '\x90');

		WriteData<3>((void*)0x58B090, '\x90');

		// Make all "objects" use the 0 Texture Index
		WriteData<1>((void*)0x58A527, '\x33');
		WriteData<1>((void*)0x58A528, '\xC0');
		WriteData<1>((void*)0x58A529, '\x90');
		WriteData<1>((void*)0x5892C8, '\x33');
		WriteData<1>((void*)0x5892C9, '\xD2');
		WriteData<2>((void*)0x5892CA, '\x90');

		// Handle AP Model and Texture
		if (!this->apIconObjPtr && (GameState == GameStates_Ingame || GameState == GameStates_Pause))
		{
			LoadAPTextures();
			this->apIconObjPtr = LoadObject(0, "APIconModel", APIconObject_Main, LoadObj_Data1 | LoadObj_Data2);
			this->apIconObjPtr->DeleteSub = APIconObject_Delete;
			this->apIconObjPtr->MainSub = APIconObject_Main;
			this->apIconObjPtr->Data1.Entity->Action = 1;
		}
		// End Handle AP Model and Texture

		if (CurrentChaoArea == 0x06 && BlackMarketObject != nullptr && BlackMarketObject->Data2.BlackMarket != nullptr)
		{
			std::vector<int> ActiveMarketSlots = LocationManager::getInstance().GetAvailableBlackMarketLocations();
			int ItemCount = min(10, ActiveMarketSlots.size());
			BlackMarketItemCount = ItemCount;

			for (int i = 0; i < ItemCount; i++)
			{
				int SlotIdx = ActiveMarketSlots[i];

				BlackMarketInventory[i].Category = ChaoItemCategory::ChaoItemCategory_Egg;
				BlackMarketInventory[i].Type = i;

				BlackMarketEggStock[i].NameTextIndex = this->_NameStringIndeces[i];
				BlackMarketEggStock[i].DescTextIndex = this->_DescStringIndeces[i];
				if (this->_blackMarketData.find((SlotIdx * 46) + 42) != this->_blackMarketData.end())
				{
					BlackMarketEggStock[i].Cost = this->_blackMarketData[(SlotIdx * 46) + 42];
				}
				// Hopefully handle Model stuff here

				// Item Names
				std::string newName = "";
				for (int chr_idx = 0; chr_idx < 26; chr_idx++)
				{
					if (this->_blackMarketData.find((SlotIdx * 46) + chr_idx) != this->_blackMarketData.end())
					{
						newName += this->_blackMarketData[(SlotIdx * 46) + chr_idx];
					}
				}

				for (int j = 0; j < newName.length(); j++)
				{
					int writeAddr = (int)BlackMarketObject->Data2.BlackMarket->textPtr;
					writeAddr += this->_NameStringOffsets[i];
					writeAddr += j;
					WriteData<1>((void*)writeAddr, newName[j]);
				}
				int writeAddr = (int)BlackMarketObject->Data2.BlackMarket->textPtr + this->_NameStringOffsets[i] + newName.length();
				WriteData<1>((void*)writeAddr, '\x00');
				// End Item Names

				// Item Descriptions
				std::string newDesc = "for ";
				for (int chr_idx = 0; chr_idx < 16; chr_idx++)
				{
					if (this->_blackMarketData.find((SlotIdx * 46) + 26 + chr_idx) != this->_blackMarketData.end())
					{
						newDesc += this->_blackMarketData[(SlotIdx * 46) + 26 + chr_idx];
					}
				}
				newDesc += ".";

				for (int j = 0; j < newDesc.length(); j++)
				{
					int writeAddr = (int)BlackMarketObject->Data2.BlackMarket->textPtr + this->_DescStringOffsets[i] + j;
					WriteData<1>((void*)writeAddr, newDesc[j]);
				}
				writeAddr = (int)BlackMarketObject->Data2.BlackMarket->textPtr + this->_DescStringOffsets[i] + newDesc.length();
				WriteData<1>((void*)writeAddr, '\x00');
				// End Item Descriptions
			}

			if (ItemCount == 0)
			{
				BlackMarketInventory[0].Category = ChaoItemCategory::ChaoItemCategory_Fruit;
				BlackMarketInventory[0].Type = 1;
				BlackMarketItemCount = 1;
			}
		}
	}
	// End Black Market

	// Entrance Randomization
	if (this->_chaoERData.size() > 0)
	{
		this->HandleChaoER();
	}
	// End Entrance Randomization

	if (GameState == GameStates::GameStates_Pause)
	{
		return;
	}

	this->_timer++;

	if (this->_timer < CGM_MEMORY_CHECK_TIME)
	{
		return;
	}

	this->_timer = 0;
}

void ChaoGardenManager::OnInputFunction()
{
	if (!this->_archipelagoManager->IsInit() || !this->_archipelagoManager->IsAuth())
	{
		return;
	}

	if (!this->_chaoEnabled)
	{
		return;
	}

	if (CurrentLevel != LevelIDs::LevelIDs_ChaoWorld)
	{
		return;
	}

	Uint32 PressedButtons = ControllersRaw->press;
	if ((PressedButtons & 0b100000) != 0) // Down
	{
		switch (this->_timescale)
		{
		case 2:
			this->_timescale = 1;
			break;
		case 5:
			this->_timescale = 2;
			break;
		case 10:
			this->_timescale = 5;
			break;
		case 15:
			this->_timescale = 10;
			break;
		}
	}
	else if ((PressedButtons & 0b10000) != 0) // Up
	{
		switch (this->_timescale)
		{
		case 1:
			this->_timescale = 2;
			break;
		case 2:
			this->_timescale = 5;
			break;
		case 5:
			this->_timescale = 10;
			break;
		case 10:
			this->_timescale = 15;
			break;
		}
	}
}

void ChaoGardenManager::HandleStartingEggs()
{
	if (ChaoEggsRandomized != 0b1111)
	{
		for (int chaoIdx = 0; chaoIdx < 24; chaoIdx++)
		{
			ChaoDataBase chaoData = ChaoSlots[chaoIdx].data;

			if (chaoData.Type != ChaoType::ChaoType_Egg)
			{
				continue;
			}

			if (chaoData.Garden != CurrentChaoArea)
			{
				continue;
			}

			if (this->_defaultEggMap.find(chaoIdx) != this->_defaultEggMap.end())
			{
				switch (CurrentChaoArea)
				{
				case 0x01:
					// Neutral Garden
					if ((ChaoEggsRandomized & 0b11) == 0b11)
					{
						continue;
					}
					else if ((ChaoEggsRandomized & 0b11) == 0b01)
					{
						ChaoEggsRandomized = ChaoEggsRandomized | 0b11;
					}
					else
					{
						ChaoEggsRandomized = ChaoEggsRandomized | 0b01;
					}
					break;
				case 0x02:
					// Hero Garden
					if ((ChaoEggsRandomized & 0b100) == 0b100)
					{
						continue;
					}
					else
					{
						ChaoEggsRandomized = ChaoEggsRandomized | 0b100;
					}
					break;
				case 0x03:
					// Dark Garden
					if ((ChaoEggsRandomized & 0b1000) == 0b1000)
					{
						continue;
					}
					else
					{
						ChaoEggsRandomized = ChaoEggsRandomized | 0b1000;
					}
					break;
				}

				// Starting Chao Names
				for (int i = 0; i < 7; i++)
				{
					ChaoSlots[chaoIdx].data.Name[i] = (char)this->_defaultChaoNameMap[i + (chaoIdx * 7)];
				}

				// Starting Chao Colors
				unsigned char color = this->_defaultEggMap[chaoIdx];

				if (color != 255)
				{
					bool twoTone = false, shiny = false, jewel = false;

					if (color == 0)
					{
						twoTone = true;
					}

					if (color > 13)
					{
						color -= 13;
						twoTone = true;
					}

					if (color > 13)
					{
						color -= 14;
						twoTone = false;
						shiny = true;
					}

					if (color > 13)
					{
						color -= 13;
						twoTone = false;
						shiny = false;
						jewel = true;
					}

					if (jewel)
					{
						ChaoSlots[chaoIdx].data.Texture = color;
					}
					else
					{
						ChaoSlots[chaoIdx].data.MonotoneHighlights = !twoTone;
						ChaoSlots[chaoIdx].data.Color = color;
						ChaoSlots[chaoIdx].data.Shiny = shiny;
					}
					ChaoSlots[chaoIdx].data.EggColor = color;
				}
			}
		}
	}
}

void ChaoGardenManager::HandleSubsequentEggs()
{
	if (ChaoNamesUsed == 0)
	{
		ChaoNamesUsed = 4;
	}

	if (ChaoNamesUsed > this->_namesUsed)
	{
		this->_namesUsed = ChaoNamesUsed;
	}

	if (this->_namesUsed >= 30)
	{
		return;
	}

	for (int chaoIdx = 0; chaoIdx < 24; chaoIdx++)
	{
		ChaoDataBase chaoData = ChaoSlots[chaoIdx].data;

		if (chaoData.Type != ChaoType::ChaoType_Egg)
		{
			continue;
		}

		if (chaoData.Garden != CurrentChaoArea)
		{
			continue;
		}

		bool emptyName = true;
		for (int i = 0; i < 7; i++)
		{
			if (chaoData.Name[i] != 0x00)
			{
				emptyName = false;
				break;
			}
		}

		if (!emptyName)
		{
			continue;
		}

		for (int i = 0; i < 7; i++)
		{
			ChaoSlots[chaoIdx].data.Name[i] = (char)this->_defaultChaoNameMap[i + (this->_namesUsed * 7)];
		}

		this->_namesUsed++;
		ChaoNamesUsed++;
	}
}

void ChaoGardenManager::HandleChaoER()
{
	if (!this->_archipelagoManager->IsInit() || !this->_archipelagoManager->IsAuth())
	{
		return;
	}

	if (!this->_chaoEnabled)
	{
		return;
	}

	if (CurrentLevel != LevelIDs::LevelIDs_ChaoWorld)
	{
		return;
	}

	for (int exit = 0; exit < 0x14; exit++)
	{
		if (this->_chaoERData.find(exit) != this->_chaoERData.end())
		{
			int destination = this->_chaoERData[exit];

			switch (exit)
			{
			case ChaoExit::CE_LobbyNeutral:
				WriteData<1>((void*)0x57F79B, (char)destination);
				break;
			case ChaoExit::CE_LobbyHero:
				WriteData<1>((void*)0x57F967, (char)destination);
				break;
			case ChaoExit::CE_LobbyDark:
				WriteData<1>((void*)0x57FDB8, (char)destination);
				break;
			case ChaoExit::CE_LobbyKindergarten:
				WriteData<1>((void*)0x57EF1B, (char)destination);
				break;
			case ChaoExit::CE_NeutralLobby:
				if (CurrentChaoArea == 0x01)
				{
					WriteData<1>((void*)0x55AC06, (char)destination);
				}
				break;
			case ChaoExit::CE_NeutralCave:
				WriteData<1>((void*)0x55ACD6, (char)destination);
				break;
			case ChaoExit::CE_NeutralTransporter:
				if (CurrentChaoArea == 0x01)
				{
					WriteData<1>((void*)0x57D9E2, (char)destination);
				}
				break;
			case ChaoExit::CE_HeroLobby:
				if (CurrentChaoArea == 0x02)
				{
					WriteData<1>((void*)0x55AC06, (char)destination);
				}
				break;
			case ChaoExit::CE_HeroTransporter:
				if (CurrentChaoArea == 0x02)
				{
					WriteData<1>((void*)0x57D9E2, (char)destination);
				}
				break;
			case ChaoExit::CE_DarkLobby:
				if (CurrentChaoArea == 0x03)
				{
					WriteData<1>((void*)0x55AC06, (char)destination);
				}
				break;
			case ChaoExit::CE_DarkTransporter:
				if (CurrentChaoArea == 0x03)
				{
					WriteData<1>((void*)0x57D9E2, (char)destination);
				}
				break;
			case ChaoExit::CE_CaveNeutral:
				WriteData<1>((void*)0x58191A, (char)destination);
				break;
			case ChaoExit::CE_CaveRace:
				WriteData<1>((void*)0x581993, (char)destination);
				break;
			case ChaoExit::CE_CaveKarate:
				WriteData<1>((void*)0x581936, (char)destination);
				break;
			case ChaoExit::CE_RaceCave:
				WriteData<1>((void*)0x533286, (char)destination);
				WriteData<1>((void*)0x533325, (char)destination);
				break;
			case ChaoExit::CE_KarateCave:
				WriteData<1>((void*)0x542EA5, (char)destination);
				break;
			case ChaoExit::CE_TransporterOut:
				//WriteData<1>((void*)0x542EA5, (char)destination);
				break;
			case ChaoExit::CE_KindergartenLobby:
				WriteData<1>((void*)0x54E53C, (char)destination);
				break;
			}
		}
	}
}

void ChaoGardenManager::SetChaoEnabled(bool chaoEnabled)
{
	// Anything Chao-related is active
	this->_chaoEnabled = chaoEnabled;
}

void ChaoGardenManager::SetChaoRaceEnabled(bool chaoRaceEnabled)
{
	this->_chaoRaceEnabled = chaoRaceEnabled;

	if (chaoRaceEnabled)
	{
		this->SetChaoEnabled(true);
	}
}

void ChaoGardenManager::SetChaoKarateEnabled(bool chaoKarateEnabled)
{
	this->_chaoKarateEnabled = chaoKarateEnabled;

	if (chaoKarateEnabled)
	{
		this->SetChaoEnabled(true);
	}
}

void ChaoGardenManager::SetChaoStatsEnabled(int chaoStatsEnabled)
{
	this->_chaoStatsEnabled = chaoStatsEnabled;

	if (chaoStatsEnabled > 0)
	{
		this->SetChaoEnabled(true);
	}
}

void ChaoGardenManager::SetChaoBodyPartsEnabled(bool chaoBodyPartsEnabled)
{
	this->_chaoBodyPartsEnabled = chaoBodyPartsEnabled;

	if (chaoBodyPartsEnabled)
	{
		this->SetChaoEnabled(true);
	}
}

void ChaoGardenManager::SetChaoKindergartenEnabled(bool chaoKindergartenEnabled)
{
	this->_chaoKindergartenEnabled = chaoKindergartenEnabled;

	if (chaoKindergartenEnabled)
	{
		this->SetChaoEnabled(true);
	}
}

void ChaoGardenManager::SetBlackMarketSlots(int blackMarketSlots)
{
	this->_blackMarketSlots = blackMarketSlots;

	if (blackMarketSlots > 0)
	{
		this->SetChaoEnabled(true);
	}
}

void ChaoGardenManager::SetBlackMarketData(std::map<int, int> map)
{
	this->_blackMarketData = map;
}

void ChaoGardenManager::SetDefaultEggMap(std::map<int, int> map)
{
	this->_defaultEggMap = map;
}

void ChaoGardenManager::SetDefaultChaoNameMap(std::map<int, int> map)
{
	this->_defaultChaoNameMap = map;
}

void ChaoGardenManager::SetChaoERData(std::map<int, int> map)
{
	this->_chaoERData = map;
}

int ChaoGardenManager::GetTimescale()
{
	if (!this->_chaoEnabled)
	{
		return 0;
	}
	else
	{
		return this->_timescale;
	}
}

void ChaoGardenManager::LoadAPTextures()
{
	LoadTextures(&OrbsTexPacks[0]);

	WriteData((int*)(0x58A52C), (int)Orbs.chunkmodel);
	WriteData((int*)(0x5892D7), (int)Orbs.chunkmodel);
	WriteData((int*)(0x58A523), (int)&OrbsTexList);
	WriteData((int*)(0x5892DE), (int)&OrbsTexList);
}

void ChaoGardenManager::ReleaseAPTextures()
{
	ReleaseTextureList(&OrbsTexList);
}
